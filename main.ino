#include <IRremote.h>

#define BAUD 9600

IRsend irsend;

// Command #1: CURSOR ENTER
// Protocol: necx1, Parameters: S=45U D=45U F=88U
const uint16_t CURSOR_ENTER[] PROGMEM = { 4512U, 4512U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 44268 };

// Command #2: CURSOR DOWN
// Protocol: necx1, Parameters: S=45U D=45U F=72U
const uint16_t CURSOR_DOWN[] PROGMEM = { 4512U, 4512U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 44268 };

// Command #3: HOME
// Protocol: necx1, Parameters: S=45U D=45U F=103U
const uint16_t HOME[] PROGMEM = { 4512U, 4512U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 44268 };

// Command #4: CURSOR RIGHT
// Protocol: necx1, Parameters: S=45U D=45U F=90U
const uint16_t CURSOR_RIGHT[] PROGMEM = { 4512U, 4512U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 44268 };

// Command #5: CURSOR UP
// Protocol: necx1, Parameters: S=45U D=45U F=71U
const uint16_t CURSOR_UP[] PROGMEM = { 4512U, 4512U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 44268 };

// Command #6: DISC MENU
// Protocol: necx1, Parameters: S=45U D=45U F=75U
const uint16_t DISC_MENU[] PROGMEM = { 4512U, 4512U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 44268 };

// Command #7: POWER
// Protocol: necx1, Parameters: S=45U D=45U F=48U
const uint16_t POWER[] PROGMEM = { 4512U, 4512U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 44268 };

// Command #8: CURSOR LEFT
// Protocol: necx1, Parameters: S=45U D=45U F=89U
const uint16_t CURSOR_LEFT[] PROGMEM = { 4512U, 4512U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 44268 };

// Command #9: PAUSE
// Protocol: necx1, Parameters: S=45U D=45U F=56U
const uint16_t PAUSE[] PROGMEM = { 4512U, 4512U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 44268 };

// Command #10: OPEN/CLOSE
// Protocol: necx1, Parameters: S=45U D=45U F=54U
const uint16_t OPEN_CLOSE[] PROGMEM = { 4512U, 4512U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 44268 };

// Command #11: PLAY
// Protocol: necx1, Parameters: S=45U D=45U F=49U
const uint16_t PLAY[] PROGMEM = { 4512U, 4512U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 44268 };

// Command #12: STOP
// Protocol: necx1, Parameters: S=45U D=45U F=57U
const uint16_t STOP[] PROGMEM = { 4512U, 4512U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 44268 };

// Command #2: SCAN<<
// Protocol: necx1, Parameters: S=45U D=45U F=50U
const uint16_t SCAN_BW[] PROGMEM = { 4512U, 4512U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 44268 };

// Command #3: SCAN>>
// Protocol: necx1, Parameters: S=45U D=45U F=51U
const uint16_t SCAN_FW[] PROGMEM = { 4512U, 4512U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 44268 };

// Command #4: TRACK +
// Protocol: necx1, Parameters: S=45U D=45U F=52U
const uint16_t TRACK_NEXT[] PROGMEM = { 4512U, 4512U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 44268 };

// Command #5: TRACK -
// Protocol: necx1, Parameters: S=45U D=45U F=53U
const uint16_t TRACK_PREV[] PROGMEM = { 4512U, 4512U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 44268 };

static void sendRaw(const uint16_t data_P[], size_t length, uint16_t frequency) {
    uint16_t data[length];
    memcpy_PF(data, (uint_farptr_t) data_P, sizeof(uint16_t) * length);
    irsend.sendRaw(data, length, frequency);
}

void setup() {
    Serial.begin(BAUD);
    Serial.println(F("IRduino is starting up!"));
}

void loop() {
    Serial.println(F("Enter number of signal to send (1-16):"));
    switch (Serial.parseInt()) {
        case 1L:
            sendRaw(POWER, 68U, 38U);
            break;
        case 2L:
            sendRaw(OPEN_CLOSE, 68U, 38U);
            break;
        case 3L:
            sendRaw(HOME, 68U, 38U);
            break;
        case 4L:
            sendRaw(DISC_MENU, 68U, 38U);
            break;
        case 5L:
            sendRaw(CURSOR_ENTER, 68U, 38U);
            break;
        case 6L:
            sendRaw(CURSOR_UP, 68U, 38U);
            break;
        case 7L:
            sendRaw(CURSOR_DOWN, 68U, 38U);
            break;
        case 8L:
            sendRaw(CURSOR_LEFT, 68U, 38U);
            break;
        case 9L:
            sendRaw(CURSOR_RIGHT, 68U, 38U);
            break;
        case 10L:
            sendRaw(PLAY, 68U, 38U);
            break;
        case 11L:
            sendRaw(PAUSE, 68U, 38U);
            break;
        case 12L:
            sendRaw(STOP, 68U, 38U);
            break;
        case 13L:
            sendRaw(SCAN_BW, 68U, 38U);
            break;
        case 14L:
            sendRaw(SCAN_FW, 68U, 38U);
            break;
        case 15L:
            sendRaw(TRACK_NEXT, 68U, 38U);
            break;
        case 16L:
            sendRaw(TRACK_PREV, 68U, 38U);
            break;
    }
}
